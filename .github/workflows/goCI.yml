name: CI setup for Go
on: #on event keyword
  push:
    branches: [main] #identifying branch    
  pull_request:
    branches: [main] #identifying branch
    
jobs: # Job to execute on event
  build:
      name: My Job
      runs-on: ubuntu-latest # specify OS in virtual machine
      steps:
      - name: Print a greeting
        run: |
          ls
          echo Hello there! # run terminal command

      - name: Setup Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16.5
      
      - name: show Go version
        run: go version
        
      - name: Checkout our codes #being repo code to virtual environment
        uses: actions/checkout@v2
        with:
          path: GoCICDDemo #Folder to save to in my virtual env
      
      - name: Check file system #check virtual environment has my files
        run: |
          cd GoCICDDemo # to access the folder of interest in my virtual env
          ls
          cat calc.go #prints the content of calc.go
          cd ..
        
      - name: Checkout private repo remotely
        uses: actions/checkout@v2
        with:
          repository: lowkh2/GoSchoolRemoteExample
          path: virtualRepoFolder #Folder to save to in my virtual env
          token: ${{ secrets.GO_SECRET }}
          
      - name: Show hidden files
        run: |
          cd virtualRepoFolder # to access the folder of interest in my virtual env
          ls
          cat myText.txt # show content of file of interest
          cd ..
          
      - name: Install dependencies for GO
        run: |
          go mod init GoCICDDemo
          go get -u github.com/franela/goblin # Adds package for Goblin testing
          go get -u github.com/tebeka/go2xunit # Adds package for conversion
          go mod tidy
          cd GoCICDDemo
          go test -v # Command to run go test
          go test -v | go2xunit > report.xml # run test again and output as report.xml (to show the effect)
          ls #Verify that the report is indeed created
          cd ..
          
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1 #Checkout Unit Test Reporting
        if: always() #always do it
        with:
          files: GoCICDDemo/report.xml #make use of a file we created
      
      - if: ${{ success() }}
        name: Create upload directory
        run: mkdir upload
        
      - name: Prepare documents
        run: mv GoCICDDemo/report.xml ./upload
        
      - name: Prepare artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: assetDocuments
          path: upload
          
      - name: Download content
        uses: actions/download-artifact@v2
        with: 
          name: assetDocuments
      
      - if: ${{ failure() }}
        name: Create Issues Notifications
        uses: nashmaniac/create-issue-action@v1.1
        with:
          title: Build Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: workflow-failed
          body: Workflow failed for commit ${{github.sha}}
          
        
          
          
